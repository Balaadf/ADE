{
	"name": "scdtype3_dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "adls_scdtype3_ds",
						"type": "DatasetReference"
					},
					"name": "adlstextfilesource1"
				},
				{
					"dataset": {
						"referenceName": "sqldb_source_scdtype3_ds",
						"type": "DatasetReference"
					},
					"name": "sqldbsource2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sqldb_source_scdtype3_ds",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "leftjoin1"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select2"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "select3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as short,",
				"          name as string,",
				"          city as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> adlstextfilesource1",
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          city as string,",
				"          old_name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sqldbsource2",
				"sqldbsource2 select(mapColumn(",
				"          db_id = id,",
				"          db_name = name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"adlstextfilesource1, select1 join(id == db_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftjoin1",
				"leftjoin1 split(!isNull(db_id),",
				"     isNull(db_id),",
				"     disjoint: false) ~> split1@(matched, notmatched)",
				"split1@matched derive(old_name = db_name) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          id,",
				"          name,",
				"          city,",
				"          old_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 alterRow(updateIf(1==1)) ~> alterRow1",
				"split1@notmatched select(mapColumn(",
				"          id,",
				"          name,",
				"          city,",
				"          db_id,",
				"          db_name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"alterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          name as string,",
				"          city as string,",
				"          old_name as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}